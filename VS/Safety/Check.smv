



MODULE _VARS
	VAR
		V_Crossing : {L_Open, L_ProtectionPhase, L_Protected, L_OpeningPhase};
		V_CrossingRadioModule : {L_Idle, L_EP_Requested, L_AP_Requested};
		V_SensorGate : {L_Open, L_Closed, L_InBetween};
		V_SensorSP : {L_Active, L_Inactive};
		V_CrossingTimer : {L_Idle, L_Counting, L_Finished};
		V_Crossing_Message : {L_Unknown, L_Insecure, L_Protected};
		V_TrainRadioModule : {L_Idle, L_EP_Request, L_AP_Request};
		V_Timer_Counter : 0..16;
		V_DriveTrain : {L_Running};
		V_Speed : 0..4;
		V_BreakCommand : {L_Break, L_DoNotBreak};
		V_Gates : {L_Open, L_Opening, L_Closing, L_Closed};
		V_Angle : 0..2;
		V_Odometer : {L_Measuring};
		V_measuredDistance : -48..16;
		V_d : -48..16;
		V_RealTrain : {L_OnGP, L_AfterGP, L_OnSP, L_AfterSP, L_BeforeGP};
		V_tick : {1};
		V_c : {1};
		V_t : {1};
		V_a : {1};
		V_z : {5};
		V_distToSP : {10};
		V_SP_CauseOpening : {L_Yes, L_No};
		V_SpeedMeasurement : {L_Measuring};
		V_measuredSpeed : 0..4;
		V_VirtualTrain : {L_OnGP, L_BEPtoGP, L_AfterGP, L_OnSP, L_AfterSP, L_APtoBEP, L_BeforeEP, L_OnEP, L_EPtoAP, L_OnAP, L_OnBEP};
	TRANS
		next(V_tick) = V_tick & next(V_c) = V_c & next(V_t) = V_t & next(V_a) = V_a & next(V_z) = V_z & next(V_distToSP) = V_distToSP;
MODULE _P_Crossing(v)
	INIT
		(v.V_Crossing = L_Open) & (TRUE)
	TRANS
		 ( v.V_Crossing = L_Open & next(v.V_Crossing) = L_ProtectionPhase & (v.V_CrossingRadioModule = L_EP_Requested) & (TRUE))  |
		 ( v.V_Crossing = L_Open & next(v.V_Crossing) = L_Open & (v.V_CrossingRadioModule != L_EP_Requested) & (TRUE))  |
		 ( v.V_Crossing = L_ProtectionPhase & next(v.V_Crossing) = L_Protected & (v.V_SensorGate = L_Closed) & (TRUE))  |
		 ( v.V_Crossing = L_ProtectionPhase & next(v.V_Crossing) = L_ProtectionPhase & (v.V_SensorGate != L_Closed) & (TRUE))  |
		 ( v.V_Crossing = L_Protected & next(v.V_Crossing) = L_OpeningPhase & ((v.V_SensorSP = L_Active) | (v.V_CrossingTimer = L_Finished)) & (TRUE))  |
		 ( v.V_Crossing = L_Protected & next(v.V_Crossing) = L_Protected & ((v.V_SensorSP != L_Active) & (v.V_CrossingTimer != L_Finished)) & (TRUE))  |
		 ( v.V_Crossing = L_OpeningPhase & next(v.V_Crossing) = L_Open & (v.V_SensorGate = L_Open) & (TRUE))  |
		 ( v.V_Crossing = L_OpeningPhase & next(v.V_Crossing) = L_OpeningPhase & (v.V_SensorGate != L_Open) & (TRUE))  |
		 ( v.V_Crossing = L_Open & next(v.V_Crossing) = L_Open & (!(v.V_CrossingRadioModule = L_EP_Requested) & !(v.V_CrossingRadioModule != L_EP_Requested)) & (TRUE))  |
		 ( v.V_Crossing = L_ProtectionPhase & next(v.V_Crossing) = L_ProtectionPhase & (!(v.V_SensorGate = L_Closed) & !(v.V_SensorGate != L_Closed)) & (TRUE))  |
		 ( v.V_Crossing = L_Protected & next(v.V_Crossing) = L_Protected & (!((v.V_SensorSP = L_Active) | (v.V_CrossingTimer = L_Finished)) & !((v.V_SensorSP != L_Active) & (v.V_CrossingTimer != L_Finished))) & (TRUE))  |
		 ( v.V_Crossing = L_OpeningPhase & next(v.V_Crossing) = L_OpeningPhase & (!(v.V_SensorGate = L_Open) & !(v.V_SensorGate != L_Open)) & (TRUE));
MODULE _P_CrossingRadioModule(v)
	INIT
		(v.V_CrossingRadioModule = L_Idle) & ((v.V_Crossing_Message = L_Unknown))
	TRANS
		 ( v.V_CrossingRadioModule = L_Idle & next(v.V_CrossingRadioModule) = L_AP_Requested & (v.V_TrainRadioModule = L_AP_Request) & (next(v.V_Crossing_Message) = L_Unknown))  |
		 ( v.V_CrossingRadioModule = L_Idle & next(v.V_CrossingRadioModule) = L_EP_Requested & (v.V_TrainRadioModule = L_EP_Request) & (next(v.V_Crossing_Message) = L_Unknown))  |
		 ( v.V_CrossingRadioModule = L_EP_Requested & next(v.V_CrossingRadioModule) = L_Idle & TRUE & (next(v.V_Crossing_Message) = v.V_Crossing_Message))  |
		 ( v.V_CrossingRadioModule = L_AP_Requested & next(v.V_CrossingRadioModule) = L_Idle & (v.V_Crossing = L_Protected) & (next(v.V_Crossing_Message) = L_Protected))  |
		 ( v.V_CrossingRadioModule = L_AP_Requested & next(v.V_CrossingRadioModule) = L_Idle & (v.V_Crossing != L_Protected) & (next(v.V_Crossing_Message) = L_Insecure))  |
		 ( v.V_CrossingRadioModule = L_Idle & next(v.V_CrossingRadioModule) = L_Idle & (!(v.V_TrainRadioModule = L_AP_Request) & !(v.V_TrainRadioModule = L_EP_Request)) & (next(v.V_Crossing_Message) = v.V_Crossing_Message))  |
		 ( v.V_CrossingRadioModule = L_AP_Requested & next(v.V_CrossingRadioModule) = L_AP_Requested & (!(v.V_Crossing = L_Protected) & !(v.V_Crossing != L_Protected)) & (next(v.V_Crossing_Message) = v.V_Crossing_Message));
MODULE _P_CrossingTimer(v)
	INIT
		(v.V_CrossingTimer = L_Idle) & ((v.V_Timer_Counter = 0))
	TRANS
		 ( v.V_CrossingTimer = L_Idle & next(v.V_CrossingTimer) = L_Idle & (v.V_Crossing != L_Protected) & (next(v.V_Timer_Counter) = v.V_Timer_Counter))  |
		 ( v.V_CrossingTimer = L_Idle & next(v.V_CrossingTimer) = L_Counting & (v.V_Crossing = L_Protected) & (next(v.V_Timer_Counter) = 0))  |
		 ( v.V_CrossingTimer = L_Counting & next(v.V_CrossingTimer) = L_Idle & (v.V_Crossing != L_Protected) & (next(v.V_Timer_Counter) = v.V_Timer_Counter))  |
		 ( v.V_CrossingTimer = L_Counting & next(v.V_CrossingTimer) = L_Finished & ((v.V_Crossing = L_Protected) & (v.V_Timer_Counter = 16)) & (next(v.V_Timer_Counter) = v.V_Timer_Counter))  |
		 ( v.V_CrossingTimer = L_Counting & next(v.V_CrossingTimer) = L_Counting & (((v.V_Crossing = L_Protected) & (v.V_Timer_Counter < 16)) & (v.V_Timer_Counter < 16)) & (next(v.V_Timer_Counter) = (v.V_Timer_Counter + 1)))  |
		 ( v.V_CrossingTimer = L_Finished & next(v.V_CrossingTimer) = L_Idle & TRUE & (next(v.V_Timer_Counter) = v.V_Timer_Counter))  |
		 ( v.V_CrossingTimer = L_Idle & next(v.V_CrossingTimer) = L_Idle & (!(v.V_Crossing != L_Protected) & !(v.V_Crossing = L_Protected)) & (next(v.V_Timer_Counter) = v.V_Timer_Counter))  |
		 ( v.V_CrossingTimer = L_Counting & next(v.V_CrossingTimer) = L_Counting & (!(v.V_Crossing != L_Protected) & (!((v.V_Crossing = L_Protected) & (v.V_Timer_Counter = 16)) & !(((v.V_Crossing = L_Protected) & (v.V_Timer_Counter < 16)) & (v.V_Timer_Counter < 16)))) & (next(v.V_Timer_Counter) = v.V_Timer_Counter));
MODULE _P_DriveTrain(v)
	INIT
		(v.V_DriveTrain = L_Running) & ((v.V_Speed = 4))
	TRANS
		 ( v.V_DriveTrain = L_Running & next(v.V_DriveTrain) = L_Running & ((v.V_BreakCommand = L_Break) & (v.V_Speed > 1)) & (next(v.V_Speed) = (v.V_Speed - 2)))  |
		 ( v.V_DriveTrain = L_Running & next(v.V_DriveTrain) = L_Running & !((v.V_BreakCommand = L_Break) & (v.V_Speed > 1)) & (next(v.V_Speed) = v.V_Speed));
MODULE _P_Gates(v)
	INIT
		(v.V_Gates = L_Open) & ((v.V_Angle = 0))
	TRANS
		 ( v.V_Gates = L_Open & next(v.V_Gates) = L_Closing & (v.V_Crossing = L_ProtectionPhase) & (next(v.V_Angle) = v.V_Angle))  |
		 ( v.V_Gates = L_Opening & next(v.V_Gates) = L_Open & (v.V_Angle = 0) & (next(v.V_Angle) = v.V_Angle))  |
		 ( v.V_Gates = L_Opening & next(v.V_Gates) = L_Opening & ((v.V_Angle > 0) & (v.V_Angle > 0)) & (next(v.V_Angle) = (v.V_Angle - 1)))  |
		 ( v.V_Gates = L_Closing & next(v.V_Gates) = L_Closed & (v.V_Angle = 2) & (next(v.V_Angle) = v.V_Angle))  |
		 ( v.V_Gates = L_Closing & next(v.V_Gates) = L_Closing & ((v.V_Angle < 2) & (v.V_Angle < 2)) & (next(v.V_Angle) = (v.V_Angle + 1)))  |
		 ( v.V_Gates = L_Closed & next(v.V_Gates) = L_Opening & (v.V_Crossing = L_OpeningPhase) & (next(v.V_Angle) = v.V_Angle))  |
		 ( v.V_Gates = L_Open & next(v.V_Gates) = L_Open & !(v.V_Crossing = L_ProtectionPhase) & (next(v.V_Angle) = v.V_Angle))  |
		 ( v.V_Gates = L_Opening & next(v.V_Gates) = L_Opening & (!(v.V_Angle = 0) & !((v.V_Angle > 0) & (v.V_Angle > 0))) & (next(v.V_Angle) = v.V_Angle))  |
		 ( v.V_Gates = L_Closing & next(v.V_Gates) = L_Closing & (!(v.V_Angle = 2) & !((v.V_Angle < 2) & (v.V_Angle < 2))) & (next(v.V_Angle) = v.V_Angle))  |
		 ( v.V_Gates = L_Closed & next(v.V_Gates) = L_Closed & !(v.V_Crossing = L_OpeningPhase) & (next(v.V_Angle) = v.V_Angle));
MODULE _P_Odometer(v)
	INIT
		(v.V_Odometer = L_Measuring) & ((v.V_measuredDistance = v.V_d))
	TRANS
		 ( v.V_Odometer = L_Measuring & next(v.V_Odometer) = L_Measuring & TRUE & (next(v.V_measuredDistance) = v.V_d));
MODULE _P_RealTrain(v)
	INIT
		(v.V_RealTrain = L_BeforeGP) & ((v.V_d = -48))
	TRANS
		 ( v.V_RealTrain = L_OnGP & next(v.V_RealTrain) = L_AfterGP & (v.V_d < (16 - (v.V_Speed * v.V_tick))) & (next(v.V_d) = (v.V_d + (v.V_Speed * v.V_tick))))  |
		 ( v.V_RealTrain = L_AfterGP & next(v.V_RealTrain) = L_OnSP & ((v.V_d >= (v.V_distToSP - (v.V_Speed * v.V_tick))) & (v.V_d < (16 - (v.V_Speed * v.V_tick)))) & (next(v.V_d) = (v.V_d + (v.V_Speed * v.V_tick))))  |
		 ( v.V_RealTrain = L_AfterGP & next(v.V_RealTrain) = L_AfterGP & ((v.V_d < v.V_distToSP) & (v.V_d < (16 - (v.V_Speed * v.V_tick)))) & (next(v.V_d) = (v.V_d + (v.V_Speed * v.V_tick))))  |
		 ( v.V_RealTrain = L_OnSP & next(v.V_RealTrain) = L_AfterSP & TRUE & (next(v.V_d) = v.V_d))  |
		 ( v.V_RealTrain = L_BeforeGP & next(v.V_RealTrain) = L_OnGP & ((v.V_d >= ((-1 * v.V_Speed) * v.V_tick)) & (v.V_d < (16 - (v.V_Speed * v.V_tick)))) & (next(v.V_d) = (v.V_d + (v.V_Speed * v.V_tick))))  |
		 ( v.V_RealTrain = L_BeforeGP & next(v.V_RealTrain) = L_BeforeGP & ((v.V_d < 0) & (v.V_d < (16 - (v.V_Speed * v.V_tick)))) & (next(v.V_d) = (v.V_d + (v.V_Speed * v.V_tick))))  |
		 ( v.V_RealTrain = L_OnGP & next(v.V_RealTrain) = L_OnGP & !(v.V_d < (16 - (v.V_Speed * v.V_tick))) & (next(v.V_d) = v.V_d))  |
		 ( v.V_RealTrain = L_AfterGP & next(v.V_RealTrain) = L_AfterGP & (!((v.V_d >= (v.V_distToSP - (v.V_Speed * v.V_tick))) & (v.V_d < (16 - (v.V_Speed * v.V_tick)))) & !((v.V_d < v.V_distToSP) & (v.V_d < (16 - (v.V_Speed * v.V_tick))))) & (next(v.V_d) = v.V_d))  |
		 ( v.V_RealTrain = L_AfterSP & next(v.V_RealTrain) = L_AfterSP & TRUE & (next(v.V_d) = v.V_d))  |
		 ( v.V_RealTrain = L_BeforeGP & next(v.V_RealTrain) = L_BeforeGP & (!((v.V_d >= ((-1 * v.V_Speed) * v.V_tick)) & (v.V_d < (16 - (v.V_Speed * v.V_tick)))) & !((v.V_d < 0) & (v.V_d < (16 - (v.V_Speed * v.V_tick))))) & (next(v.V_d) = v.V_d));
MODULE _P_SensorGate(v)
	INIT
		(v.V_SensorGate = L_Open) & (TRUE)
	TRANS
		 ( v.V_SensorGate = L_Open & next(v.V_SensorGate) = L_InBetween & (v.V_Gates != L_Open) & (TRUE))  |
		 ( v.V_SensorGate = L_Closed & next(v.V_SensorGate) = L_InBetween & (v.V_Gates != L_Closed) & (TRUE))  |
		 ( v.V_SensorGate = L_InBetween & next(v.V_SensorGate) = L_Open & (v.V_Gates = L_Open) & (TRUE))  |
		 ( v.V_SensorGate = L_InBetween & next(v.V_SensorGate) = L_Closed & (v.V_Gates = L_Closed) & (TRUE))  |
		 ( v.V_SensorGate = L_Open & next(v.V_SensorGate) = L_Open & !(v.V_Gates != L_Open) & (TRUE))  |
		 ( v.V_SensorGate = L_Closed & next(v.V_SensorGate) = L_Closed & !(v.V_Gates != L_Closed) & (TRUE))  |
		 ( v.V_SensorGate = L_InBetween & next(v.V_SensorGate) = L_InBetween & (!(v.V_Gates = L_Open) & !(v.V_Gates = L_Closed)) & (TRUE));
MODULE _P_SensorSP(v)
	INIT
		(v.V_SensorSP = L_Inactive) & ((v.V_SP_CauseOpening = L_No))
	TRANS
		 ( v.V_SensorSP = L_Active & next(v.V_SensorSP) = L_Inactive & (v.V_RealTrain != L_OnSP) & (next(v.V_SP_CauseOpening) = L_Yes))  |
		 ( v.V_SensorSP = L_Inactive & next(v.V_SensorSP) = L_Active & (v.V_RealTrain = L_OnSP) & (next(v.V_SP_CauseOpening) = L_No))  |
		 ( v.V_SensorSP = L_Active & next(v.V_SensorSP) = L_Active & !(v.V_RealTrain != L_OnSP) & (next(v.V_SP_CauseOpening) = v.V_SP_CauseOpening))  |
		 ( v.V_SensorSP = L_Inactive & next(v.V_SensorSP) = L_Inactive & !(v.V_RealTrain = L_OnSP) & (next(v.V_SP_CauseOpening) = v.V_SP_CauseOpening));
MODULE _P_SpeedMeasurement(v)
	INIT
		(v.V_SpeedMeasurement = L_Measuring) & ((v.V_measuredSpeed = v.V_Speed))
	TRANS
		 ( v.V_SpeedMeasurement = L_Measuring & next(v.V_SpeedMeasurement) = L_Measuring & TRUE & (next(v.V_measuredSpeed) = v.V_Speed));
MODULE _P_TrainRadioModule(v)
	INIT
		(v.V_TrainRadioModule = L_Idle) & (TRUE)
	TRANS
		 ( v.V_TrainRadioModule = L_Idle & next(v.V_TrainRadioModule) = L_AP_Request & (v.V_VirtualTrain = L_OnAP) & (TRUE))  |
		 ( v.V_TrainRadioModule = L_Idle & next(v.V_TrainRadioModule) = L_EP_Request & (v.V_VirtualTrain = L_OnEP) & (TRUE))  |
		 ( v.V_TrainRadioModule = L_EP_Request & next(v.V_TrainRadioModule) = L_Idle & TRUE & (TRUE))  |
		 ( v.V_TrainRadioModule = L_AP_Request & next(v.V_TrainRadioModule) = L_Idle & TRUE & (TRUE))  |
		 ( v.V_TrainRadioModule = L_Idle & next(v.V_TrainRadioModule) = L_Idle & (!(v.V_VirtualTrain = L_OnAP) & !(v.V_VirtualTrain = L_OnEP)) & (TRUE));
MODULE _P_VirtualTrain(v)
	INIT
		(v.V_VirtualTrain = L_BeforeEP) & ((v.V_BreakCommand = L_DoNotBreak))
	TRANS
		 ( v.V_VirtualTrain = L_OnGP & next(v.V_VirtualTrain) = L_AfterGP & TRUE & (next(v.V_BreakCommand) = v.V_BreakCommand))  |
		 ( v.V_VirtualTrain = L_BEPtoGP & next(v.V_VirtualTrain) = L_OnGP & (v.V_measuredDistance >= 0) & (next(v.V_BreakCommand) = v.V_BreakCommand))  |
		 ( v.V_VirtualTrain = L_AfterGP & next(v.V_VirtualTrain) = L_OnSP & (v.V_measuredDistance >= v.V_distToSP) & (next(v.V_BreakCommand) = v.V_BreakCommand))  |
		 ( v.V_VirtualTrain = L_OnSP & next(v.V_VirtualTrain) = L_AfterSP & TRUE & (next(v.V_BreakCommand) = v.V_BreakCommand))  |
		 ( v.V_VirtualTrain = L_APtoBEP & next(v.V_VirtualTrain) = L_OnBEP & (v.V_measuredDistance >= ((-1 * v.V_z) - (((v.V_measuredSpeed * v.V_measuredSpeed) / 2) / v.V_a))) & (next(v.V_BreakCommand) = v.V_BreakCommand))  |
		 ( v.V_VirtualTrain = L_BeforeEP & next(v.V_VirtualTrain) = L_OnEP & (v.V_measuredDistance >= ((((-1 * v.V_z) - (((v.V_measuredSpeed * v.V_measuredSpeed) / 2) / v.V_a)) - ((2 * v.V_c) * v.V_measuredSpeed)) - (v.V_measuredSpeed * (v.V_t + v.V_c)))) & (next(v.V_BreakCommand) = v.V_BreakCommand))  |
		 ( v.V_VirtualTrain = L_OnEP & next(v.V_VirtualTrain) = L_EPtoAP & TRUE & (next(v.V_BreakCommand) = v.V_BreakCommand))  |
		 ( v.V_VirtualTrain = L_EPtoAP & next(v.V_VirtualTrain) = L_OnAP & (v.V_measuredDistance >= (((-1 * v.V_z) - (((v.V_measuredSpeed * v.V_measuredSpeed) / 2) / v.V_a)) - ((2 * v.V_c) * v.V_measuredSpeed))) & (next(v.V_BreakCommand) = v.V_BreakCommand))  |
		 ( v.V_VirtualTrain = L_OnAP & next(v.V_VirtualTrain) = L_APtoBEP & TRUE & (next(v.V_BreakCommand) = v.V_BreakCommand))  |
		 ( v.V_VirtualTrain = L_OnBEP & next(v.V_VirtualTrain) = L_BEPtoGP & (v.V_Crossing_Message != L_Protected) & (next(v.V_BreakCommand) = L_Break))  |
		 ( v.V_VirtualTrain = L_BEPtoGP & next(v.V_VirtualTrain) = L_BEPtoGP & !(v.V_measuredDistance >= 0) & (next(v.V_BreakCommand) = v.V_BreakCommand))  |
		 ( v.V_VirtualTrain = L_AfterGP & next(v.V_VirtualTrain) = L_AfterGP & !(v.V_measuredDistance >= v.V_distToSP) & (next(v.V_BreakCommand) = v.V_BreakCommand))  |
		 ( v.V_VirtualTrain = L_AfterSP & next(v.V_VirtualTrain) = L_AfterSP & TRUE & (next(v.V_BreakCommand) = v.V_BreakCommand))  |
		 ( v.V_VirtualTrain = L_APtoBEP & next(v.V_VirtualTrain) = L_APtoBEP & !(v.V_measuredDistance >= ((-1 * v.V_z) - (((v.V_measuredSpeed * v.V_measuredSpeed) / 2) / v.V_a))) & (next(v.V_BreakCommand) = v.V_BreakCommand))  |
		 ( v.V_VirtualTrain = L_BeforeEP & next(v.V_VirtualTrain) = L_BeforeEP & !(v.V_measuredDistance >= ((((-1 * v.V_z) - (((v.V_measuredSpeed * v.V_measuredSpeed) / 2) / v.V_a)) - ((2 * v.V_c) * v.V_measuredSpeed)) - (v.V_measuredSpeed * (v.V_t + v.V_c)))) & (next(v.V_BreakCommand) = v.V_BreakCommand))  |
		 ( v.V_VirtualTrain = L_EPtoAP & next(v.V_VirtualTrain) = L_EPtoAP & !(v.V_measuredDistance >= (((-1 * v.V_z) - (((v.V_measuredSpeed * v.V_measuredSpeed) / 2) / v.V_a)) - ((2 * v.V_c) * v.V_measuredSpeed))) & (next(v.V_BreakCommand) = v.V_BreakCommand))  |
		 ( v.V_VirtualTrain = L_OnBEP & next(v.V_VirtualTrain) = L_OnBEP & !(v.V_Crossing_Message != L_Protected) & (next(v.V_BreakCommand) = v.V_BreakCommand));
MODULE main
	VAR
		v : _VARS();
		p_Crossing : _P_Crossing(v);
		p_CrossingRadioModule : _P_CrossingRadioModule(v);
		p_CrossingTimer : _P_CrossingTimer(v);
		p_DriveTrain : _P_DriveTrain(v);
		p_Gates : _P_Gates(v);
		p_Odometer : _P_Odometer(v);
		p_RealTrain : _P_RealTrain(v);
		p_SensorGate : _P_SensorGate(v);
		p_SensorSP : _P_SensorSP(v);
		p_SpeedMeasurement : _P_SpeedMeasurement(v);
		p_TrainRadioModule : _P_TrainRadioModule(v);
		p_VirtualTrain : _P_VirtualTrain(v);




DEFINE
    Crossing                        := v.V_Crossing;
    CrossingRadioModule             := v.V_CrossingRadioModule;
    CrossingTimer                   := v.V_CrossingTimer;
	DriveTrain                      := v.V_DriveTrain;
    Gates                           := v.V_Gates;
	Odometer                        := v.V_Odometer;
    RealTrain                       := v.V_RealTrain;
    SensorGate                      := v.V_SensorGate;
    SensorSP                        := v.V_SensorSP;
    TrainRadioModule                := v.V_TrainRadioModule;
	VirtualTrain                    := v.V_VirtualTrain;

	HAZARD  := RealTrain = L_OnGP & Crossing != L_Protected;

	EP		:= -1 * v.V_z - v.V_measuredSpeed * v.V_measuredSpeed / 2 / v.V_a - 2 * v.V_c * v.V_measuredSpeed - v.V_measuredSpeed * ( v.V_t + v.V_c );
	AP		:= -1 * v.V_z - v.V_measuredSpeed * v.V_measuredSpeed / 2 / v.V_a - 2 * v.V_c * v.V_measuredSpeed;
	BEP		:= -1 * v.V_z - v.V_measuredSpeed * v.V_measuredSpeed / 2 / v.V_a;

-- Initial state check
CTLSPEC RealTrain = L_BeforeGP;
CTLSPEC VirtualTrain = L_BeforeEP;
CTLSPEC Crossing = L_Open;
CTLSPEC CrossingRadioModule = L_Idle;
CTLSPEC CrossingTimer = L_Idle;
CTLSPEC DriveTrain = L_Running;
CTLSPEC Gates = L_Open;
CTLSPEC Odometer = L_Measuring;
CTLSPEC SensorGate = L_Open;
CTLSPEC SensorSP = L_Inactive;
CTLSPEC TrainRadioModule = L_Idle;
CTLSPEC v.V_d = -48;
CTLSPEC v.V_BreakCommand = L_DoNotBreak;
CTLSPEC v.V_measuredSpeed = 4;
CTLSPEC v.V_SP_CauseOpening = L_No;
CTLSPEC v.V_measuredDistance = -48;
CTLSPEC v.V_Angle = 0;
CTLSPEC v.V_Speed = 4;
CTLSPEC v.V_Timer_Counter = 0;
CTLSPEC v.V_Crossing_Message = L_Unknown;



LTLSPEC ! F HAZARD;