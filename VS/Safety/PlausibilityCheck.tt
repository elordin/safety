<#@ template inherits="Safety.ProgramGraphDsl.ProgramGraphTransformation" hostspecific="true" #>
<#@ output encoding="us-ascii" extension=".smv" #>
<#@ assembly Name="Safety.ProgramGraphDsl.dll" #>

<#=  TransformToNuSMV() #>


DEFINE
    Crossing                        := v.V_Crossing;
    CrossingRadioModule             := v.V_CrossingRadioModule;
    CrossingTimer                   := v.V_CrossingTimer;
	DriveTrain                      := v.V_DriveTrain;
    Gates                           := v.V_Gates;
	Odometer                        := v.V_Odometer;
    RealTrain                       := v.V_RealTrain;
    SensorGate                      := v.V_SensorGate;
    SensorSP                        := v.V_SensorSP;
    TrainRadioModule                := v.V_TrainRadioModule;
	VirtualTrain                    := v.V_VirtualTrain;
	 
    HAZARD                          := RealTrain = L_OnGP & Crossing != L_Protected;

    EP                              := 
		-1 * v.V_z - v.V_Speed * v.V_Speed / 2 / v.V_a - 2 * v.V_c * v.V_Speed - v.V_Speed * ( v.V_t + v.V_c );
    AP								:= 
		-1 * v.V_z - v.V_Speed * v.V_Speed / 2 / v.V_a - 2 * v.V_c * v.V_Speed;
    BEP								:= 
		-1 * v.V_z - v.V_Speed * v.V_Speed / 2 / v.V_a;
		
	NOFAULT := TRUE;	

--- Initial state check
LTLSPEC NOFAULT;
LTLSPEC RealTrain = L_BeforeGP;
LTLSPEC VirtualTrain = L_BeforeEP;
LTLSPEC Crossing = L_Open;
LTLSPEC CrossingRadioModule = L_Idle;
LTLSPEC CrossingTimer = L_Idle;
LTLSPEC DriveTrain = L_Running;
LTLSPEC Gates = L_Open;
LTLSPEC Odometer = L_Measuring;
LTLSPEC SensorGate = L_Open;
LTLSPEC SensorSP = L_Inactive;
LTLSPEC TrainRadioModule = L_Idle;
LTLSPEC v.V_d = -96;
LTLSPEC v.V_BreakCommand = L_DoNotBreak;
LTLSPEC v.V_measuredSpeed = 4;
LTLSPEC v.V_measuredDistance = -96;
LTLSPEC v.V_Angle = 0;
LTLSPEC v.V_Speed = 4;
LTLSPEC v.V_Timer_Counter = 0;
LTLSPEC v.V_Crossing_Message = L_Unknown;

-- Stepwise position progression.
LTLSPEC (G NOFAULT) -> (X v.V_d = -92);
LTLSPEC (G NOFAULT) -> (X X v.V_d = -88);
LTLSPEC (G NOFAULT) -> (X X X v.V_d = -84);
LTLSPEC (G NOFAULT) -> (X X X X v.V_d = -80);
LTLSPEC (G NOFAULT) -> (X X X X X v.V_d = -76);
LTLSPEC (G NOFAULT) -> (X X X X X X v.V_d = -72);
LTLSPEC (G NOFAULT) -> (X X X X X X X v.V_d = -68);
LTLSPEC (G NOFAULT) -> (X X X X X X X X v.V_d = -64);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X v.V_d = -60);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X v.V_d = -56);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X X v.V_d = -52);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X X X v.V_d = -48);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X X X X v.V_d = -44);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X X X X X v.V_d = -40);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X X X X X X v.V_d = -36);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X X X X X X X v.V_d = -32);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X X X X X X X X v.V_d = -28);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X X X X X X X X X v.V_d = -24);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X X X X X X X X X X v.V_d = -20);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X X X X X X X X X X X v.V_d = -16);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X X X X X X X X X X X X v.V_d = -12);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X X X X X X X X X X X X X v.V_d =  -8);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X X X X X X X X X X X X X X v.V_d =  -4);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X X X X X X X X X X X X X X X v.V_d =   0);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X X X X X X X X X X X X X X X X v.V_d =   4);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X X X X X X X X X X X X X X X X X v.V_d =   8);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X X X X X X X X X X X X X X X X X X v.V_d =  12);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X X X X X X X X X X X X X X X X X X X v.V_d =  16);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X X X X X X X X X X X X X X X X X X X X v.V_d =  20);
LTLSPEC (G NOFAULT) -> (X X X X X X X X X X X X X X X X X X X X X X X X X X X X X X v.V_d =  24);

-- Real train travels across the crossing
LTLSPEC (G NOFAULT) -> (F RealTrain = L_OnGP);
LTLSPEC (G NOFAULT) -> (F RealTrain = L_AfterGP);
LTLSPEC (G NOFAULT) -> (F RealTrain = L_OnSP);
LTLSPEC (G NOFAULT) -> (F RealTrain = L_AfterSP);

-- Virtual train travels across the crossing
LTLSPEC (G NOFAULT) -> (F VirtualTrain = L_BeforeEP);
LTLSPEC (G NOFAULT) -> (F VirtualTrain = L_OnEP);
LTLSPEC (G NOFAULT) -> (F VirtualTrain = L_EPtoAP);
LTLSPEC (G NOFAULT) -> (F VirtualTrain = L_OnAP);
LTLSPEC (G NOFAULT) -> (F VirtualTrain = L_APtoBEP);
LTLSPEC (G NOFAULT) -> (F VirtualTrain = L_OnBEP);
LTLSPEC (G NOFAULT) -> (F VirtualTrain = L_BEPtoGP);
LTLSPEC (G NOFAULT) -> (F VirtualTrain = L_OnGP);
LTLSPEC (G NOFAULT) -> (F VirtualTrain = L_AfterGP);
LTLSPEC (G NOFAULT) -> (F VirtualTrain = L_OnSP);
LTLSPEC (G NOFAULT) -> (F VirtualTrain = L_AfterSP);

-- Order
LTLSPEC (G NOFAULT) -> ( F VirtualTrain = L_BeforeEP & 
                         F VirtualTrain = L_OnEP & 
                         F VirtualTrain = L_EPtoAP & 
                         F VirtualTrain = L_OnAP & 
                         F VirtualTrain = L_APtoBEP & 
                         F VirtualTrain = L_OnBEP & 
                         F VirtualTrain = L_BEPtoGP & 
                         F VirtualTrain = L_OnGP & 
                         F VirtualTrain = L_AfterGP & 
                         F VirtualTrain = L_OnSP & 
                         F VirtualTrain = L_AfterSP );

-- Virtual train update delay is max. 2 steps
LTLSPEC (G NOFAULT) -> (G (RealTrain = L_OnGP -> ( VirtualTrain = L_OnGP | X VirtualTrain = L_OnGP | X X VirtualTrain = L_OnGP ))); 
LTLSPEC (G NOFAULT) -> (G (RealTrain = L_OnSP -> ( VirtualTrain = L_OnSP | X VirtualTrain = L_OnSP | X X VirtualTrain = L_OnSP)));

-- Sending of messages
LTLSPEC (G NOFAULT) -> (G (VirtualTrain = L_OnEP -> X TrainRadioModule = L_EP_Request));
LTLSPEC (G NOFAULT) -> (G (VirtualTrain = L_OnAP -> X TrainRadioModule = L_AP_Request));
LTLSPEC (G NOFAULT) -> (G (CrossingRadioModule = L_EP_Requested -> X Crossing = L_ProtectionPhase));
LTLSPEC (G NOFAULT) -> (G (CrossingRadioModule = L_AP_Requested -> X (v.V_Crossing_Message = L_Protected | v.V_Crossing_Message = L_Insecure)));
LTLSPEC (G NOFAULT) -> (G (CrossingRadioModule = L_AP_Requested -> X (v.V_Crossing_Message = L_Protected)));
-- No Premature sending
LTLSPEC (G NOFAULT) -> ((v.V_d <= BEP) U v.V_Crossing_Message != L_Unknown);
LTLSPEC (G NOFAULT) -> ((v.V_d <= AP) U CrossingRadioModule != L_Idle);
LTLSPEC (G NOFAULT) -> ((v.V_d <= AP) U TrainRadioModule != L_Idle);

-- Sensor functionality
LTLSPEC (G NOFAULT) -> (G ( Gates = L_Open -> X SensorGate = L_Open ));
LTLSPEC (G NOFAULT) -> (G ( SensorGate = L_Open -> Crossing != L_Protected ));
LTLSPEC (G NOFAULT) -> (G ( v.V_Angle = 0 -> Gates != L_Closed ) );

LTLSPEC (G NOFAULT) -> (G ( Gates = L_Closed -> X SensorGate = L_Closed ));
LTLSPEC (G NOFAULT) -> (G ( RealTrain = L_OnSP -> X SensorSP = L_Active ));
 
-- Train eventually leaves the GP
CTLSPEC (AG NOFAULT) -> (AG ( RealTrain = L_OnGP -> AF RealTrain = L_AfterSP ));

-- Gates close and open
LTLSPEC (G NOFAULT) -> (F (Gates != L_Open U Gates = L_Open));
LTLSPEC (G NOFAULT) -> (G ( Crossing = L_Protected -> F Crossing = L_Open ));
LTLSPEC (G NOFAULT) -> (G ( Gates = L_Closed -> F Gates = L_Open ));
LTLSPEC (G NOFAULT) -> (F ( v.V_Angle > 0 & ( v.V_Angle > 0 U v.V_Angle = 0 ) ));
LTLSPEC (G NOFAULT) -> (F ( v.V_Angle > 0 & ( F Gates = L_Open )));
CTLSPEC (AG NOFAULT) -> (! EG Gates = L_Closed);
CTLSPEC (AG NOFAULT) -> (! EG Gates = L_Open);

-- When breaking, the train never passes the crossing
CTLSPEC (AG NOFAULT) -> (AG ( v.V_BreakCommand = L_Break -> ! EF RealTrain = L_OnGP ));

-- After sending the first request, the train must break or pass a safe crossing
CTLSPEC AG CrossingRadioModule = L_EP_Request -> A [ RealTrain != L_OnGP U Crossing = L_Protected & AF RealTrain = L_AfterSP ]
CTLSPEC AG CrossingRadioModule = L_EP_Request -> A [ RealTrain != L_OnGP U (Crossing = L_Protected & AF RealTrain = L_AfterSP) | v.V_BreakCommand = L_Break ]

-- Hazard free.
LTLSPEC (G NOFAULT) -> (G (RealTrain = L_OnGP -> Crossing = L_Protected));
LTLSPEC (G NOFAULT) -> (! F HAZARD);