<#@ template inherits="Safety.ProgramGraphDsl.ProgramGraphTransformation" hostspecific="true" #>
<#@ output encoding="us-ascii" extension=".smv" #>
<#@ assembly Name="Safety.ProgramGraphDsl.dll" #>

<#=  TransformToNuSMV() #>

DEFINE
    Crossing                        := v.V_Crossing;
    CrossingRadioModule             := v.V_CrossingRadioModule;
    CrossingTimer                   := v.V_CrossingTimer;
	DriveTrain                      := v.V_DriveTrain;
    Gates                           := v.V_Gates;
	Odometer                        := v.V_Odometer;
    RealTrain                       := v.V_RealTrain;
    SensorGate                      := v.V_SensorGate;
    SensorSP                        := v.V_SensorSP;
    TrainRadioModule                := v.V_TrainRadioModule;
	VirtualTrain                    := v.V_VirtualTrain;

	HAZARD  := RealTrain = L_OnGP & Crossing != L_Protected;

	EP		:= -1 * v.V_z - v.V_measuredSpeed * v.V_measuredSpeed / 2 / v.V_a - 2 * v.V_c * v.V_measuredSpeed - v.V_measuredSpeed * ( v.V_t + v.V_c );
	AP		:= -1 * v.V_z - v.V_measuredSpeed * v.V_measuredSpeed / 2 / v.V_a - 2 * v.V_c * v.V_measuredSpeed;
	BEP		:= -1 * v.V_z - v.V_measuredSpeed * v.V_measuredSpeed / 2 / v.V_a;

-- Initial state check
CTLSPEC RealTrain = L_BeforeGP;
CTLSPEC VirtualTrain = L_BeforeEP;
CTLSPEC Crossing = L_Open;
CTLSPEC CrossingRadioModule = L_Idle;
CTLSPEC CrossingTimer = L_Idle;
CTLSPEC DriveTrain = L_Running;
CTLSPEC Gates = L_Open;
CTLSPEC Odometer = L_Measuring;
CTLSPEC SensorGate = L_Open;
CTLSPEC SensorSP = L_Inactive;
CTLSPEC TrainRadioModule = L_Idle;
CTLSPEC v.V_d = -48;
CTLSPEC v.V_BreakCommand = L_DoNotBreak;
CTLSPEC v.V_measuredSpeed = 4;
CTLSPEC v.V_SP_CauseOpening = L_No;
CTLSPEC v.V_measuredDistance = -48;
CTLSPEC v.V_Angle = 0;
CTLSPEC v.V_Speed = 4;
CTLSPEC v.V_Timer_Counter = 0;
CTLSPEC v.V_Crossing_Message = L_Unknown;



LTLSPEC ! F HAZARD;